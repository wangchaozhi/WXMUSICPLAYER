name: Build AppImage

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  build-appimage:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          echo "ÂºÄÂßãËÆæÁΩÆÊûÑÂª∫ÁéØÂ¢É..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq cmake build-essential pkg-config
          sudo apt-get install -y -qq libgtk-3-dev
          sudo apt-get install -y -qq wget file imagemagick
          echo "ÊûÑÂª∫ÁéØÂ¢ÉËÆæÁΩÆÂÆåÊàê"

      - name: Install system dependencies
        run: |
          echo "ÂÆâË£ÖÁ≥ªÁªü‰æùËµñ..."
          sudo apt-get install -y -qq libsdl2-dev libsdl2-mixer-dev
          # ÂÆâË£ÖÈü≥È¢ëÂ∫ì
          sudo apt-get install -y -qq libasound2-dev libpulse-dev
          # Â∞ùËØïÂÆâË£ÖwxWidgetsÂºÄÂèëÂåÖÔºå‰ΩøÁî®Ê≠£Á°ÆÁöÑÂåÖÂêç
          sudo apt-get install -y -qq libwxgtk3.0-gtk3-dev || sudo apt-get install -y -qq libwxgtk3.0-dev || sudo apt-get install -y -qq wx3.0-headers
          echo "Á≥ªÁªü‰æùËµñÂÆâË£ÖÂÆåÊàê"

      - name: Install AppImage build dependencies
        run: |
          echo "üì¶ ÂÆâË£ÖAppImageÊûÑÂª∫‰æùËµñ..."
          sudo apt-get install -y \
            wget \
            fuse \
            libfuse2 \
            desktop-file-utils \
            zsync
          echo "‚úÖ AppImageÊûÑÂª∫‰æùËµñÂÆâË£ÖÂÆåÊàê"

      - name: Download AppImage tools
        run: |
          echo "üì• ‰∏ãËΩΩAppImageÂ∑•ÂÖ∑..."
          # ‰∏ãËΩΩ appimagetool
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool

          # ‰∏ãËΩΩ linuxdeploy (Áî®‰∫é‰æùËµñÊî∂ÈõÜ)
          wget -O linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy
          echo "‚úÖ AppImageÂ∑•ÂÖ∑‰∏ãËΩΩÂÆåÊàê"

      - name: Create AppDir structure
        run: |
          # ÂàõÂª∫ AppDir ÁªìÊûÑ
          mkdir -p wxMusicPlayer.AppDir/usr/bin
          mkdir -p wxMusicPlayer.AppDir/usr/lib
          mkdir -p wxMusicPlayer.AppDir/usr/share/applications
          mkdir -p wxMusicPlayer.AppDir/usr/share/icons/hicolor/256x256/apps

      - name: Build application
        run: |
          echo "üî® ÂºÄÂßãÊûÑÂª∫Â∫îÁî®Á®ãÂ∫è..."
          mkdir build
          cd build
          # ‰ΩøÁî®Âä®ÊÄÅÈìæÊé•Ôºå‰ΩÜÁ°Æ‰øùÂÖºÂÆπÊÄß
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
          echo "‚öôÔ∏è  ÈÖçÁΩÆÂÆåÊàêÔºåÂºÄÂßãÁºñËØë..."
          make -j$(nproc)
          echo "‚úÖ Â∫îÁî®Á®ãÂ∫èÊûÑÂª∫ÂÆåÊàê"

      - name: Copy executable and dependencies
        run: |
          # Copy the main executable
          cp build/bin/wxmusicplayer wxMusicPlayer.AppDir/usr/bin/
          chmod +x wxMusicPlayer.AppDir/usr/bin/wxmusicplayer

          # Copy all dependencies using ldd with better error handling
          echo "Copying dependencies..."
          ldd build/bin/wxmusicplayer | grep -v linux-vdso | grep -v ld-linux | awk '{print $3}' | while read lib; do
            if [ -n "$lib" ] && [ -f "$lib" ]; then
              # Skip system core libraries that should not be copied
              libname=$(basename "$lib")
              if [[ "$libname" =~ ^(libc\.|libm\.|libgcc_s\.|libstdc\+\+\.|ld-linux|libpthread\.|libdl\.|libutil\.|libgomp\.|libatomic\.|libquadmath\.|libgfortran\.|libgcc_s_|libstdc\+\+_|libmvec\.) ]]; then
                echo "Skipping system library: $lib"
                continue
              fi
              echo "Copying: $lib"
              cp "$lib" wxMusicPlayer.AppDir/usr/lib/ 2>/dev/null || echo "Failed to copy: $lib"
            fi
          done

          # Also copy wxWidgets libraries specifically
          echo "Copying wxWidgets libraries..."
          find /usr/lib -name "libwx_gtk3u_*.so*" -exec cp {} wxMusicPlayer.AppDir/usr/lib/ \; 2>/dev/null || true
          find /usr/lib/x86_64-linux-gnu -name "libwx_gtk3u_*.so*" -exec cp {} wxMusicPlayer.AppDir/usr/lib/ \; 2>/dev/null || true

          # List what we copied
          echo "Libraries in wxMusicPlayer.AppDir/usr/lib/:"
          ls -la wxMusicPlayer.AppDir/usr/lib/ || echo "No libraries found"

      - name: Create desktop file
        run: |
          # ÂàõÂª∫Ê°åÈù¢Êñá‰ª∂
          cat > wxMusicPlayer.AppDir/usr/share/applications/wxmusicplayer.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=wxMusicPlayer
          GenericName=Music Player
          Comment=Simple music player built with wxWidgets
          Exec=wxmusicplayer
          Icon=wxmusicplayer
          Categories=AudioVideo;Audio;Player;
          Keywords=music;player;audio;wxwidgets;
          StartupNotify=true
          Terminal=false
          EOF

          # Â§çÂà∂Ê°åÈù¢Êñá‰ª∂Âà∞Ê†πÁõÆÂΩïÔºàAppImageÊ†áÂáÜË¶ÅÊ±ÇÔºâ
          cp wxMusicPlayer.AppDir/usr/share/applications/wxmusicplayer.desktop wxMusicPlayer.AppDir/

          # Á°Æ‰øùÊ°åÈù¢Êñá‰ª∂Âú®Ê≠£Á°Æ‰ΩçÁΩÆ
          ls -la wxMusicPlayer.AppDir/usr/share/applications/

      - name: Create icon
        run: |
          # Create a simple icon using basic shapes
          convert -size 256x256 xc:transparent -fill "#4A90E2" -draw "circle 128,128 128,64" \
                  -fill "#2E5C8A" -draw "circle 128,128 100,50" \
                  wxMusicPlayer.AppDir/usr/share/icons/hicolor/256x256/apps/wxmusicplayer.png

          # Â§çÂà∂Âà∞ AppDir Ê†πÁõÆÂΩïÔºàAppImage Ê†áÂáÜË¶ÅÊ±ÇÔºâ
          cp wxMusicPlayer.AppDir/usr/share/icons/hicolor/256x256/apps/wxmusicplayer.png wxMusicPlayer.AppDir/

      - name: Create AppRun script
        run: |
          # ÂàõÂª∫ AppRun ÂêØÂä®ËÑöÊú¨
          cat > wxMusicPlayer.AppDir/AppRun << 'EOF'
          #!/bin/bash

          # Ëé∑Âèñ AppImage ÊåÇËΩΩÁõÆÂΩï
          HERE="$(dirname "$(readlink -f "${0}")")"

          # ËÆæÁΩÆÂ∫ìË∑ØÂæÑ
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"

          # ÂêØÂä®Â∫îÁî®
          exec "${HERE}/usr/bin/wxmusicplayer" "$@"
          EOF

          chmod +x wxMusicPlayer.AppDir/AppRun

      - name: Create AppImage with appimagetool
        run: |
          echo "üì¶ ÂºÄÂßãÊûÑÂª∫AppImage..."

          # È™åËØÅ AppDir ÁªìÊûÑ
          echo "È™åËØÅ AppDir ÁªìÊûÑ:"
          ls -la wxMusicPlayer.AppDir/

          # È™åËØÅÂøÖÈúÄÊñá‰ª∂
          if [ ! -f wxMusicPlayer.AppDir/AppRun ]; then
            echo "ÈîôËØØ: Áº∫Â∞ë AppRun"
            exit 1
          fi

          if [ ! -f wxMusicPlayer.AppDir/wxmusicplayer.desktop ]; then
            echo "ÈîôËØØ: Áº∫Â∞ëÊ°åÈù¢Êñá‰ª∂"
            exit 1
          fi

          # È¶ñÂÖàÂàõÂª∫tar.gzÂåÖ‰Ωú‰∏∫Â§áÁî®
          echo "üì¶ ÂàõÂª∫tar.gzÂåÖ..."
          tar -czf wxMusicPlayer-Linux-x86_64.tar.gz -C wxMusicPlayer.AppDir .
          echo "‚úÖ tar.gzÂåÖÂàõÂª∫ÂÆåÊàê"

          # ‰ΩøÁî® appimagetool ÂàõÂª∫ AppImage
          echo "üî® ÊûÑÂª∫AppImage..."
          ARCH=x86_64 ./appimagetool wxMusicPlayer.AppDir wxMusicPlayer-x86_64.AppImage

          # Ê£ÄÊü•ÁîüÊàêÁöÑ AppImage Âπ∂ÈáçÂëΩÂêç
          echo "Ê£ÄÊü•ÁîüÊàêÁöÑ AppImage Êñá‰ª∂:"
          ls -la *.AppImage || echo "Ê≤°ÊúâÊâæÂà∞ AppImage Êñá‰ª∂"

          # Áªü‰∏ÄÈáçÂëΩÂêç
          if [ -f wxMusicPlayer-x86_64.AppImage ]; then
            mv wxMusicPlayer-x86_64.AppImage wxMusicPlayer-Linux-x86_64.AppImage
            echo "ÈáçÂëΩÂêç: wxMusicPlayer-x86_64.AppImage -> wxMusicPlayer-Linux-x86_64.AppImage"
          fi

          echo "ÊúÄÁªàÊñá‰ª∂:"
          ls -la wxMusicPlayer-Linux-x86_64.AppImage || echo "ÈáçÂëΩÂêçÂ§±Ë¥•"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wxMusicPlayer-Linux
          path: |
            wxMusicPlayer-Linux-x86_64.tar.gz
            wxMusicPlayer-Linux-x86_64.AppImage
          if-no-files-found: error

      - name: Create release on tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            wxMusicPlayer-Linux-x86_64.tar.gz
            wxMusicPlayer-Linux-x86_64.AppImage
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
