name: Build AppImage

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  build-appimage:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          echo "开始设置构建环境..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq cmake build-essential pkg-config
          sudo apt-get install -y -qq libgtk-3-dev
          sudo apt-get install -y -qq wget file imagemagick
          echo "构建环境设置完成"

      - name: Install system dependencies
        run: |
          echo "安装系统依赖..."
          sudo apt-get install -y -qq libsdl2-dev libsdl2-mixer-dev
          # 安装音频库
          sudo apt-get install -y -qq libasound2-dev libpulse-dev
          # 尝试安装wxWidgets开发包，使用正确的包名
          sudo apt-get install -y -qq libwxgtk3.0-gtk3-dev || sudo apt-get install -y -qq libwxgtk3.0-dev || sudo apt-get install -y -qq wx3.0-headers
          echo "系统依赖安装完成"

      - name: Install AppImage tools
        run: |
          echo "📦 安装AppImage工具..."
          # 安装FUSE支持
          sudo apt-get install -y -qq fuse3 libfuse2
          # 下载AppImage工具（使用稳定版本）
          wget -c "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool
          # 检查FUSE
          ls -la /dev/fuse || echo "FUSE设备不存在"
          lsmod | grep fuse || echo "FUSE模块未加载"
          # 检查AppImage工具
          appimagetool --version || echo "AppImage工具版本检查失败"
          echo "✅ AppImage工具安装完成"

      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          mkdir -p AppDir/usr/lib

      - name: Build application
        run: |
          echo "🔨 开始构建应用程序..."
          mkdir build
          cd build
          # 使用动态链接，但确保兼容性
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
          echo "⚙️  配置完成，开始编译..."
          make -j$(nproc)
          echo "✅ 应用程序构建完成"

      - name: Copy executable and dependencies
        run: |
          # Copy the main executable
          cp build/bin/wxmusicplayer AppDir/usr/bin/
          chmod +x AppDir/usr/bin/wxmusicplayer

          # Copy all dependencies using ldd with better error handling
          echo "Copying dependencies..."
          ldd build/bin/wxmusicplayer | grep -v linux-vdso | grep -v ld-linux | awk '{print $3}' | while read lib; do
            if [ -n "$lib" ] && [ -f "$lib" ]; then
              # Skip system core libraries that should not be copied
              libname=$(basename "$lib")
              if [[ "$libname" =~ ^(libc\.|libm\.|libgcc_s\.|libstdc\+\+\.|ld-linux|libpthread\.|libdl\.|libutil\.|libgomp\.|libatomic\.|libquadmath\.|libgfortran\.|libgcc_s_|libstdc\+\+_|libmvec\.) ]]; then
                echo "Skipping system library: $lib"
                continue
              fi
              echo "Copying: $lib"
              cp "$lib" AppDir/usr/lib/ 2>/dev/null || echo "Failed to copy: $lib"
            fi
          done

          # Also copy wxWidgets libraries specifically
          echo "Copying wxWidgets libraries..."
          find /usr/lib -name "libwx_gtk3u_*.so*" -exec cp {} AppDir/usr/lib/ \; 2>/dev/null || true
          find /usr/lib/x86_64-linux-gnu -name "libwx_gtk3u_*.so*" -exec cp {} AppDir/usr/lib/ \; 2>/dev/null || true

          # List what we copied
          echo "Libraries in AppDir/usr/lib/:"
          ls -la AppDir/usr/lib/ || echo "No libraries found"

      - name: Create desktop file
        run: |
          cat > AppDir/usr/share/applications/wxmusicplayer.desktop << EOF
          [Desktop Entry]
          Name=wxMusicPlayer
          GenericName=Music Player
          Comment=Simple music player built with wxWidgets
          Exec=wxmusicplayer
          Icon=wxmusicplayer
          Terminal=false
          Type=Application
          Categories=AudioVideo;Audio;Player;
          Keywords=music;player;audio;wxwidgets;
          EOF

      - name: Create icon
        run: |
          # Create a simple icon using basic shapes
          convert -size 256x256 xc:transparent -fill "#4A90E2" -draw "circle 128,128 128,64" \
                  -fill "#2E5C8A" -draw "circle 128,128 100,50" \
                  AppDir/usr/share/icons/hicolor/256x256/apps/wxmusicplayer.png

      - name: Create AppRun script
        run: |
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}"/usr/bin/:"${PATH}"
          export LD_LIBRARY_PATH="${HERE}"/usr/lib/:"${LD_LIBRARY_PATH}"

          # Debug: show what libraries are available
          echo "Available libraries in ${HERE}/usr/lib/:"
          ls -la "${HERE}"/usr/lib/ 2>/dev/null || echo "No libraries found"

          # Check if executable exists
          if [ ! -f "${HERE}/usr/bin/wxmusicplayer" ]; then
            echo "Error: wxmusicplayer executable not found!"
            exit 1
          fi

          # Show library dependencies
          echo "Library dependencies:"
          ldd "${HERE}/usr/bin/wxmusicplayer" 2>/dev/null || echo "Failed to check dependencies"

          exec "${HERE}"/usr/bin/wxmusicplayer "$@"
          EOF
          chmod +x AppDir/AppRun

      - name: Build AppImage
        run: |
          echo "📦 开始构建AppImage..."
          # 复制运行脚本到AppDir
          cp run_linux.sh AppDir/
          chmod +x AppDir/run_linux.sh

          # 检查AppDir内容
          echo "📁 AppDir内容:"
          find AppDir -type f -executable

          # 首先创建tar.gz包作为备用
          echo "📦 创建tar.gz包..."
          tar -czf wxMusicPlayer-Linux-x86_64.tar.gz -C AppDir .
          echo "✅ tar.gz包创建完成"

          # 尝试构建AppImage
          echo "🔨 构建AppImage..."
          # 尝试使用不同的方法构建AppImage
          if appimagetool AppDir wxMusicPlayer-x86_64.AppImage; then
            echo "🎉 AppImage构建成功！"
          else
            echo "⚠️  AppImage构建失败，尝试使用--no-fuse选项..."
            if appimagetool --no-fuse AppDir wxMusicPlayer-x86_64.AppImage; then
              echo "🎉 AppImage构建成功（无FUSE模式）！"
            else
              echo "⚠️  AppImage构建完全失败，错误代码: $?"
              echo "📦 已创建tar.gz包作为替代"
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wxMusicPlayer-Linux
          path: |
            wxMusicPlayer-Linux-x86_64.tar.gz
            wxMusicPlayer-x86_64.AppImage
          if-no-files-found: error

      - name: Create release on tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            wxMusicPlayer-x86_64.AppImage
            wxMusicPlayer-Linux-x86_64.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
